import React from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import {
  BarChart,
  Bar,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  Legend,
  ResponsiveContainer,
  LineChart,
  Line,
  PieChart,
  Pie,
  Cell,
  AreaChart,
  Area,
} from "recharts";

interface ChartData {
  name: string;
  value: number;
  [key: string]: any;
}

interface MetricChartProps {
  data: ChartData[];
  title: string;
  type: "bar" | "line" | "pie" | "area";
  height?: number;
  color?: string;
  dataKey?: string;
}

const COLORS = [
  "#3B82F6", // blue-500
  "#10B981", // emerald-500
  "#F59E0B", // amber-500
  "#EF4444", // red-500
  "#8B5CF6", // violet-500
  "#06B6D4", // cyan-500
  "#F97316", // orange-500
  "#84CC16", // lime-500
];

export const MetricChart: React.FC<MetricChartProps> = ({
  data,
  title,
  type,
  height = 300,
  color = "#3B82F6",
  dataKey = "value",
}) => {
  const renderChart = () => {
    switch (type) {
      case "bar":
        return (
          <BarChart data={data}>
            <CartesianGrid strokeDasharray="3 3" className="opacity-30" />
            <XAxis
              dataKey="name"
              className="text-xs fill-slate-600"
              tick={{ fontSize: 12 }}
            />
            <YAxis className="text-xs fill-slate-600" tick={{ fontSize: 12 }} />
            <Tooltip
              contentStyle={{
                backgroundColor: "#1E293B",
                border: "1px solid #475569",
                borderRadius: "8px",
                color: "#F8FAFC",
              }}
            />
            <Bar dataKey={dataKey} fill={color} radius={[4, 4, 0, 0]} />
          </BarChart>
        );

      case "line":
        return (
          <LineChart data={data}>
            <CartesianGrid strokeDasharray="3 3" className="opacity-30" />
            <XAxis
              dataKey="name"
              className="text-xs fill-slate-600"
              tick={{ fontSize: 12 }}
            />
            <YAxis className="text-xs fill-slate-600" tick={{ fontSize: 12 }} />
            <Tooltip
              contentStyle={{
                backgroundColor: "#1E293B",
                border: "1px solid #475569",
                borderRadius: "8px",
                color: "#F8FAFC",
              }}
            />
            <Line
              type="monotone"
              dataKey={dataKey}
              stroke={color}
              strokeWidth={3}
              dot={{ fill: color, strokeWidth: 2, r: 4 }}
              activeDot={{ r: 6 }}
            />
          </LineChart>
        );

      case "area":
        return (
          <AreaChart data={data}>
            <CartesianGrid strokeDasharray="3 3" className="opacity-30" />
            <XAxis
              dataKey="name"
              className="text-xs fill-slate-600"
              tick={{ fontSize: 12 }}
            />
            <YAxis className="text-xs fill-slate-600" tick={{ fontSize: 12 }} />
            <Tooltip
              contentStyle={{
                backgroundColor: "#1E293B",
                border: "1px solid #475569",
                borderRadius: "8px",
                color: "#F8FAFC",
              }}
            />
            <Area
              type="monotone"
              dataKey={dataKey}
              stroke={color}
              fillOpacity={0.6}
              fill={color}
            />
          </AreaChart>
        );

      case "pie":
        return (
          <PieChart>
            <Pie
              data={data}
              cx="50%"
              cy="50%"
              outerRadius={100}
              fill="#8884d8"
              dataKey={dataKey}
              label={({ name, percent }) =>
                `${name} ${(percent * 100).toFixed(0)}%`
              }
              labelLine={false}
            >
              {data.map((entry, index) => (
                <Cell
                  key={`cell-${index}`}
                  fill={COLORS[index % COLORS.length]}
                />
              ))}
            </Pie>
            <Tooltip
              contentStyle={{
                backgroundColor: "#1E293B",
                border: "1px solid #475569",
                borderRadius: "8px",
                color: "#F8FAFC",
              }}
            />
          </PieChart>
        );

      default:
        return null;
    }
  };

  return (
    <Card className="border-2 border-black bg-slate-800 text-white">
      <CardHeader>
        <CardTitle className="text-lg font-semibold">{title}</CardTitle>
      </CardHeader>
      <CardContent>
        <ResponsiveContainer width="100%" height={height}>
          {renderChart()}
        </ResponsiveContainer>
      </CardContent>
    </Card>
  );
};

interface RealTimeMetricProps {
  title: string;
  value: number;
  change: number;
  trend: "up" | "down" | "stable";
  format?: "number" | "percentage" | "currency" | "time";
  subtitle?: string;
}

export const RealTimeMetric: React.FC<RealTimeMetricProps> = ({
  title,
  value,
  change,
  trend,
  format = "number",
  subtitle,
}) => {
  const formatValue = (val: number) => {
    switch (format) {
      case "percentage":
        return `${val.toFixed(1)}%`;
      case "currency":
        return `R${val.toLocaleString()}`;
      case "time":
        return `${Math.round(val)}ms`;
      default:
        return val.toLocaleString();
    }
  };

  const getTrendColor = () => {
    switch (trend) {
      case "up":
        return "text-green-600";
      case "down":
        return "text-red-600";
      default:
        return "text-gray-600";
    }
  };

  const getTrendIcon = () => {
    switch (trend) {
      case "up":
        return "↗";
      case "down":
        return "↘";
      default:
        return "→";
    }
  };

  return (
    <Card className="border-2 border-black bg-slate-800 text-white">
      <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
        <CardTitle className="text-sm font-medium uppercase tracking-wide">
          {title}
        </CardTitle>
        <span className={`text-sm font-medium ${getTrendColor()}`}>
          {getTrendIcon()} {Math.abs(change).toFixed(1)}%
        </span>
      </CardHeader>
      <CardContent>
        <div className="text-2xl font-bold">
          {formatValue(value)}
        </div>
        {subtitle && <p className="text-xs text-slate-400">{subtitle}</p>}
      </CardContent>
    </Card>
  );
};

interface ActivityFeedItem {
  id: string;
  type: "user" | "payment" | "system" | "content";
  title: string;
  description: string;
  timestamp: string;
  severity?: "info" | "warning" | "error" | "success";
}

interface ActivityFeedProps {
  items: ActivityFeedItem[];
  title: string;
  maxItems?: number;
}

export const ActivityFeed: React.FC<ActivityFeedProps> = ({
  items,
  title,
  maxItems = 10,
}) => {
  const getIconByType = (type: string) => {
    switch (type) {
      case "user":
        return "👤";
      case "payment":
        return "💳";
      case "system":
        return "⚙️";
      case "content":
        return "📝";
      default:
        return "📊";
    }
  };

  const getSeverityColor = (severity?: string) => {
    switch (severity) {
      case "error":
        return "border-l-red-500 bg-slate-700";
      case "warning":
        return "border-l-orange-500 bg-slate-700";
      case "success":
        return "border-l-green-500 bg-slate-700";
      default:
        return "border-l-blue-500 bg-slate-700";
    }
  };

  return (
    <Card className="border-2 border-black bg-slate-800 text-white">
      <CardHeader>
        <CardTitle className="text-lg font-semibold">{title}</CardTitle>
      </CardHeader>
      <CardContent>
        <div className="space-y-3 max-h-96 overflow-y-auto">
          {items.slice(0, maxItems).map((item) => (
            <div
              key={item.id}
              className={`border-l-4 p-4 rounded-r-lg ${getSeverityColor(item.severity)}`}
            >
              <div className="flex items-start space-x-3">
                <span className="text-xl">{getIconByType(item.type)}</span>
                <div className="flex-1 min-w-0">
                  <p className="text-sm font-medium text-white">
                    {item.title}
                  </p>
                  <p className="text-sm text-slate-300 mt-1">{item.description}</p>
                  <p className="text-xs text-slate-400 mt-1">
                    {new Date(item.timestamp).toLocaleString()}
                  </p>
                </div>
              </div>
            </div>
          ))}
        </div>
      </CardContent>
    </Card>
  );
};

interface ProgressRingProps {
  progress: number;
  size?: number;
  strokeWidth?: number;
  color?: string;
  label?: string;
}

export const ProgressRing: React.FC<ProgressRingProps> = ({
  progress,
  size = 120,
  strokeWidth = 8,
  color = "#3B82F6",
  label,
}) => {
  const radius = (size - strokeWidth) / 2;
  const circumference = radius * 2 * Math.PI;
  const offset = circumference - (progress / 100) * circumference;

  return (
    <div className="relative inline-flex items-center justify-center">
      <svg className="transform -rotate-90" width={size} height={size}>
        <circle
          cx={size / 2}
          cy={size / 2}
          r={radius}
          stroke="#E5E7EB"
          strokeWidth={strokeWidth}
          fill="transparent"
        />
        <circle
          cx={size / 2}
          cy={size / 2}
          r={radius}
          stroke={color}
          strokeWidth={strokeWidth}
          fill="transparent"
          strokeDasharray={circumference}
          strokeDashoffset={offset}
          strokeLinecap="round"
          className="transition-all duration-1000 ease-out"
        />
      </svg>
      <div className="absolute inset-0 flex flex-col items-center justify-center">
        <span className="text-2xl font-bold text-white">
          {Math.round(progress)}%
        </span>
        {label && (
          <span className="text-sm text-slate-400 text-center">{label}</span>
        )}
      </div>
    </div>
  );
};
