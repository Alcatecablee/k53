'use client';
import React, { useState, useMemo } from "react";
import {  ChevronUp, ChevronDown, Search, Filter, Download, Eye, Edit, Trash2, FileText, FileSpreadsheet  } from 'lucide-react';
import {  Button  } from '@/components/ui/button';
import {  Input  } from '@/components/ui/input';
import {  Badge  } from '@/components/ui/badge';
import {  Select, SelectContent, SelectItem, SelectTrigger, SelectValue  } from '@/components/ui/select';
import {  DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger  } from '@/components/ui/dropdown-menu';

export interface DataTableColumn<T = any> {
  key: string;
  title: string;
  sortable?: boolean;
  filterable?: boolean;
  render?: (value: unknown, row: T) => React.ReactNode;
  width?: string;
  align?: "left" | "center" | "right";
}

export interface DataTableProps<T = any> {
  data: T[];
  columns: DataTableColumn<T>[];
  title?: string;
  searchable?: boolean;
  exportable?: boolean;
  pageSize?: number;
  onRowClick?: (row: T) => void;
  onEdit?: (row: T) => void;
  onDelete?: (row: T) => void;
  onView?: (row: T) => void;
  loading?: boolean;
  emptyMessage?: string;
}

type SortDirection = "asc" | "desc" | null;

interface SortConfig {
  key: string;
  direction: SortDirection;
}

export function DataTable<T extends Record<string, any>>({
  data,
  columns,
  title,
  searchable = true,
  exportable = true,
  pageSize = 10,
  onRowClick,
  onEdit,
  onDelete,
  onView,
  loading = false,
  emptyMessage = "No data available"
}: DataTableProps<T>) {
  const [sortConfig, setSortConfig] = useState<SortConfig>({
    key: "",
    direction: null
  });
  const [currentPage, setCurrentPage] = useState(1);
  const [searchTerm, setSearchTerm] = useState("");
  const [filters, setFilters] = useState<Record<string, string>>({});
  const [selectedRows, setSelectedRows] = useState<Set<number>>(new Set());

  // Export functions
  const exportToCSV = () => {
    const headers = columns.map((col) => col.title).join(',');
    const rows = filteredData.map((row) =>
    columns.map((col) => {
      const value = row[col.key];
      // Handle special characters and commas properly
      const stringValue = String(value || '');
      if (stringValue.includes(',') || stringValue.includes('"') || stringValue.includes('\n')) {
        // Escape quotes and wrap in quotes
        return `"${stringValue.replace(/"/g, '""')}"`;
      }
      return stringValue;
    }).join(',')
    );
    const csv = [headers, ...rows].join('\n');
    // Add BOM for Excel compatibility
    const csvWithBOM = '\uFEFF' + csv;
    downloadFile(csvWithBOM, `${title || 'data'}.csv`, 'text/csv;charset=utf-8');
  };

  const exportToJSON = () => {
    const jsonData = filteredData.map((row) => {
      const obj: unknown = {};
      columns.forEach((col) => {
        obj[col.title] = row[col.key];
      });
      return obj;
    });
    const json = JSON.stringify(jsonData, null, 2);
    downloadFile(json, `${title || 'data'}.json`, 'application/json');
  };

  const downloadFile = (content: string, filename: string, mimeType: string) => {
    const blob = new Blob([content], { type: mimeType });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = filename;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
  };

  // Sorting logic
  const sortedData = useMemo(() => {
    if (!sortConfig.key || !sortConfig.direction) return data;

    return [...data].sort((a, b) => {
      const aVal = a[sortConfig.key];
      const bVal = b[sortConfig.key];

      if (aVal === bVal) return 0;

      const isAsc = sortConfig.direction === "asc";

      // Handle numbers
      if (typeof aVal === "number" && typeof bVal === "number") {
        return isAsc ? aVal - bVal : bVal - aVal;
      }

      // Handle strings
      const aStr = String(aVal).toLowerCase();
      const bStr = String(bVal).toLowerCase();

      return isAsc ? aStr.localeCompare(bStr) : bStr.localeCompare(aStr);
    });
  }, [data, sortConfig]);

  // Filtering logic
  const filteredData = useMemo(() => {
    let result = sortedData;

    // Apply search term
    if (searchTerm) {
      result = result.filter((row) =>
      Object.values(row).some((value) =>
      String(value).toLowerCase().includes(searchTerm.toLowerCase())
      )
      );
    }

    // Apply column filters
    Object.entries(filters).forEach(([key, value]) => {
      if (value && value !== "all") {
        result = result.filter((row) =>
        String(row[key]).toLowerCase().includes(value.toLowerCase())
        );
      }
    });

    return result;
  }, [sortedData, searchTerm, filters]);

  // Pagination logic
  const totalPages = Math.ceil(filteredData.length / pageSize);
  const startIndex = (currentPage - 1) * pageSize;
  const paginatedData = filteredData.slice(startIndex, startIndex + pageSize);

  const handleSort = (key: string) => {
    setSortConfig((prev) => ({
      key,
      direction:
      prev.key === key && prev.direction === "asc" ? "desc" : "asc"
    }));
  };

  const getSortIcon = (key: string) => {
    if (sortConfig.key !== key) {
      return <ChevronUp className="w-4 h-4 opacity-50" />;
    }

    return sortConfig.direction === "asc" ?
    <ChevronUp className="w-4 h-4" /> :

    <ChevronDown className="w-4 h-4" />;

  };

  if (loading) {
    return (
      <div className="bg-slate-800 rounded-lg shadow-sm border border-slate-600 p-8">
        <div className="animate-pulse">
          <div className="h-8 bg-slate-600 rounded mb-6"></div>
          <div className="space-y-4">
            {[...Array(5)].map((_, i) =>
            <div key={i} className="h-12 bg-slate-700 rounded"></div>
            )}
          </div>
        </div>
      </div>);

  }

  return (
    <div className="bg-slate-800 rounded-lg shadow-sm border-2 border-black">
      {/* Header */}
      <div className="p-6 border-b border-black">
        <div className="flex items-center justify-between mb-4">
          {title &&
          <h2 className="text-xl font-semibold text-white">{title}</h2>
          }

          <div className="flex items-center space-x-3">
            {exportable &&
            <DropdownMenu>
                <DropdownMenuTrigger asChild>
                  <Button
                  variant="outline"
                  size="sm"
                  className="border-black bg-slate-700 text-white hover:bg-slate-600">

                    <Download className="w-4 h-4 mr-2" />
                    Export
                  </Button>
                </DropdownMenuTrigger>
                <DropdownMenuContent>
                  <DropdownMenuItem onClick={exportToCSV}>
                    <FileText className="w-4 h-4 mr-2" /> CSV
                  </DropdownMenuItem>
                  <DropdownMenuItem onClick={exportToJSON}>
                    <FileText className="w-4 h-4 mr-2" /> JSON
                  </DropdownMenuItem>
                </DropdownMenuContent>
              </DropdownMenu>
            }
          </div>
        </div>

        {/* Search and Filters */}
        <div className="flex items-center space-x-4">
          {searchable &&
          <div className="flex-1 relative">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400" />
              <Input
              placeholder="Search..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="pl-10 border-black bg-slate-700 text-white" />

            </div>
          }

          {/* Column Filters */}
          <div className="flex items-center space-x-2">
            {columns.
            filter((col) => col.filterable).
            map((col) =>
            <Select
              key={col.key}
              value={filters[col.key] || ""}
              onValueChange={(value) =>
              setFilters((prev) => ({ ...prev, [col.key]: value }))
              }>

                  <SelectTrigger className="w-40 border-black bg-slate-700 text-white">
                    <SelectValue placeholder={`Filter ${col.title}`} />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="all">All {col.title}</SelectItem>
                    {[...new Set(data.map((row) => row[col.key]))].map(
                  (value) =>
                  <SelectItem key={String(value)} value={String(value)}>
                          {String(value)}
                        </SelectItem>

                )}
                  </SelectContent>
                </Select>
            )}
          </div>
        </div>
      </div>

      {/* Table */}
      <div className="overflow-x-auto">
        <table className="w-full">
          <thead className="bg-slate-700 border-b border-black">
            <tr>
              <th className="w-12 px-6 py-3">
                <input
                  type="checkbox"
                  className="rounded border-gray-300"
                  onChange={(e) => {
                    if (e.target.checked) {
                      setSelectedRows(
                        new Set(paginatedData.map((_, i) => startIndex + i))
                      );
                    } else {
                      setSelectedRows(new Set());
                    }
                  }}
                  checked={
                  selectedRows.size === paginatedData.length &&
                  paginatedData.length > 0
                  } />

              </th>
              {columns.map((column) =>
              <th
                key={column.key}
                className={`px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider ${
                column.sortable ? "cursor-pointer hover:bg-gray-100" : ""}`
                }
                style={{ width: column.width }}
                onClick={() => handleSort(column.key)}>

                  <div className="flex items-center space-x-1">
                    <span>{column.title}</span>
                    {column.sortable && getSortIcon(column.key)}
                  </div>
                </th>
              )}
              <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                Actions
              </th>
            </tr>
          </thead>
          <tbody className="bg-slate-800 divide-y divide-slate-600">
            {paginatedData.length === 0 ?
            <tr>
                <td
                colSpan={columns.length + 2}
                className="px-6 py-12 text-center text-gray-500">

                  {emptyMessage}
                </td>
              </tr> :

            paginatedData.map((row, index) =>
            <tr
              key={index}
              className="hover:bg-slate-700 cursor-pointer"
              onClick={() => onRowClick?.(row)}>

                  <td className="px-6 py-4">
                    <input
                  type="checkbox"
                  className="rounded border-gray-300"
                  checked={selectedRows.has(startIndex + index)}
                  onChange={(e) => {
                    const newSelected = new Set(selectedRows);
                    if (e.target.checked) {
                      newSelected.add(startIndex + index);
                    } else {
                      newSelected.delete(startIndex + index);
                    }
                    setSelectedRows(newSelected);
                  }}
                  onClick={(e) => e.stopPropagation()} />

                  </td>
                  {columns.map((column) =>
              <td
                key={column.key}
                className={`px-6 py-4 whitespace-nowrap text-sm text-white ${
                column.align === "center" ?
                "text-center" :
                column.align === "right" ?
                "text-right" :
                "text-left"}`
                }>

                      {column.render ?
                column.render(row[column.key], row) :
                (() => {
                  const value = row[column.key];
                  if (value === null || value === undefined) return "";
                  if (typeof value === "object") {
                    try {
                      return JSON.stringify(value);
                    } catch {
                      return "[Object]";
                    }
                  }
                  return String(value);
                })()}
                    </td>
              )}
                  <td className="px-6 py-4 text-right text-sm font-medium">
                    <div className="flex items-center justify-end space-x-2">
                      {onView &&
                  <Button
                    variant="ghost"
                    size="sm"
                    onClick={(e) => {
                      e.stopPropagation();
                      onView(row);
                    }}
                    className="text-blue-600 hover:text-blue-900">

                          <Eye className="w-4 h-4" />
                        </Button>
                  }
                      {onEdit &&
                  <Button
                    variant="ghost"
                    size="sm"
                    onClick={(e) => {
                      e.stopPropagation();
                      onEdit(row);
                    }}
                    className="text-green-600 hover:text-green-900">

                          <Edit className="w-4 h-4" />
                        </Button>
                  }
                      {onDelete &&
                  <Button
                    variant="ghost"
                    size="sm"
                    onClick={(e) => {
                      e.stopPropagation();
                      onDelete(row);
                    }}
                    className="text-red-600 hover:text-red-900">

                          <Trash2 className="w-4 h-4" />
                        </Button>
                  }
                    </div>
                  </td>
                </tr>
            )
            }
          </tbody>
        </table>
      </div>

      {/* Pagination */}
      {totalPages > 1 &&
      <div className="px-6 py-4 border-t border-slate-600">
          <div className="flex items-center justify-between">
            <div className="text-sm text-gray-700">
              Showing {startIndex + 1} to{" "}
              {Math.min(startIndex + pageSize, filteredData.length)} of{" "}
              {filteredData.length} results
            </div>
            <div className="flex items-center space-x-2">
              <Button
              variant="outline"
              size="sm"
              onClick={() => setCurrentPage(currentPage - 1)}
              disabled={currentPage === 1}
              className="border-black bg-slate-700 text-white hover:bg-slate-600">

                Previous
              </Button>
              <span className="text-sm text-white">
                Page {currentPage} of {totalPages}
              </span>
              <Button
              variant="outline"
              size="sm"
              onClick={() => setCurrentPage(currentPage + 1)}
              disabled={currentPage === totalPages}
              className="border-black bg-slate-700 text-white hover:bg-slate-600">

                Next
              </Button>
            </div>
          </div>
        </div>
      }
    </div>);

}

export function StatusBadge({ status, variant }: {status: string;variant?: string;}) {
  const getStatusColor = (status: string, variant?: string) => {
    if (variant) {
      switch (variant) {
        case "success":
          return "bg-green-100 text-green-800";
        case "warning":
          return "bg-yellow-100 text-yellow-800";
        case "error":
          return "bg-red-100 text-red-800";
        case "info":
          return "bg-blue-100 text-blue-800";
        default:
          return "bg-gray-100 text-gray-800";
      }
    }

    switch (status.toLowerCase()) {
      case "active":
      case "completed":
      case "success":
        return "bg-green-100 text-green-800";
      case "pending":
      case "processing":
        return "bg-yellow-100 text-yellow-800";
      case "failed":
      case "error":
      case "cancelled":
        return "bg-red-100 text-red-800";
      default:
        return "bg-gray-100 text-gray-800";
    }
  };

  return (
    <Badge className={getStatusColor(status, variant)}>
      {status.charAt(0).toUpperCase() + status.slice(1)}
    </Badge>);

}


export default StatusBadge;
