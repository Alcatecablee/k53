import React, { useState, useEffect } from "react";
import { 
  Trophy, 
  Medal, 
  Crown, 
  Award,
  TrendingUp,
  Users,
  Star,
  Calendar
} from "lucide-react";
import { AchievementDatabaseService } from "@/services/achievementDatabaseService";

interface AchievementLeaderboardProps {
  className?: string;
  userId?: string;
}

interface LeaderboardEntry {
  rank: number;
  user_id: string;
  total_achievements: number;
  total_points: number;
  username: string;
}

export default function AchievementLeaderboard({ 
  className = "",
  userId 
}: AchievementLeaderboardProps) {
  const [leaderboard, setLeaderboard] = useState<LeaderboardEntry[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [timeRange, setTimeRange] = useState<'all' | 'month' | 'week'>('all');

  useEffect(() => {
    const loadLeaderboard = async () => {
      try {
        setLoading(true);
        setError(null);
        
        const data = await AchievementDatabaseService.getLeaderboard();
        setLeaderboard(data.map(entry => ({
          user_id: entry.userId,
          total_achievements: entry.totalAchievements,
          total_points: entry.totalPoints,
          username: `User ${entry.userId.substring(0, 8)}`,
          rank: entry.rank
        })));
      } catch (err) {
        // [NeuroLint] Removed console.error: 'Error loading leaderboard:', err
        setError('Failed to load leaderboard data');
      } finally {
        setLoading(false);
      }
    };

    loadLeaderboard();
  }, [timeRange]);

  const getRankIcon = (rank: number) => {
    if (rank === 1) return <Crown className="h-5 w-5 text-orange-400" />;
    if (rank === 2) return <Medal className="h-5 w-5 text-slate-300" />;
    if (rank === 3) return <Award className="h-5 w-5 text-amber-600" />;
    return <span className="text-slate-400 font-bold">{rank}</span>;
  };

  const getRankBadge = (rank: number) => {
    if (rank === 1) return "bg-orange-500 text-orange-900";
    if (rank === 2) return "bg-slate-400 text-white";
    if (rank === 3) return "bg-amber-600 text-amber-900";
    return "bg-slate-600 text-white";
  };

  const isCurrentUser = (entryUserId: string) => {
    return userId === entryUserId;
  };

  if (loading) {
    return (
      <div className={`animate-pulse ${className}`}>
        <div className="bg-slate-800 border border-slate-600 rounded-lg p-6">
          <div className="space-y-4">
            <div className="h-6 bg-slate-700 rounded w-1/3"></div>
            <div className="space-y-3">
              {[...Array(5)].map((_, i) => (
                <div key={i} className="h-16 bg-slate-700 rounded"></div>
              ))}
            </div>
          </div>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className={`text-center py-8 ${className}`}>
        <div className="bg-slate-800 border border-slate-600 rounded-lg p-6 max-w-md mx-auto">
          <Trophy className="h-12 w-12 mx-auto mb-4 text-slate-400" />
          <h3 className="text-lg font-semibold text-white mb-2">Leaderboard Unavailable</h3>
          <p className="text-slate-300 mb-4">{error}</p>
          <button
            onClick={() => window.location.reload()}
            className="bg-slate-800 text-white hover:bg-slate-700 px-4 py-2 rounded font-medium"
          >
            Try Again
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className={className}>
      {/* Header */}
      <div className="flex items-center justify-between mb-6">
        <h2 className="text-2xl font-bold text-white flex items-center">
          <Trophy className="h-6 w-6 mr-2" />
          Achievement Leaderboard
        </h2>
        <div className="flex items-center space-x-2">
          <select
            value={timeRange}
            onChange={(e) => setTimeRange(e.target.value as any)}
            className="bg-slate-700 text-white border border-slate-600 rounded px-3 py-1 text-sm focus:outline-none focus:ring-2 focus:ring-white focus:ring-offset-2 focus:ring-offset-slate-900"
          >
            <option value="all">All Time</option>
            <option value="month">This Month</option>
            <option value="week">This Week</option>
          </select>
        </div>
      </div>

      {/* Leaderboard */}
      <div className="bg-slate-800 border border-slate-600 rounded-lg overflow-hidden">
        {/* Header Row */}
        <div className="bg-slate-700 px-6 py-3 border-b border-slate-600">
          <div className="grid grid-cols-12 gap-4 text-sm font-medium text-slate-300">
            <div className="col-span-1">Rank</div>
            <div className="col-span-6">User</div>
            <div className="col-span-2 text-center">Achievements</div>
            <div className="col-span-2 text-center">Points</div>
            <div className="col-span-1"></div>
          </div>
        </div>

        {/* Leaderboard Entries */}
        <div className="divide-y divide-slate-600">
          {leaderboard.length === 0 ? (
            <div className="p-8 text-center">
              <Users className="h-12 w-12 mx-auto mb-4 text-slate-400" />
              <p className="text-slate-300">No leaderboard data available</p>
              <p className="text-slate-400 text-sm">Start unlocking achievements to appear on the leaderboard</p>
            </div>
          ) : (
            leaderboard.map((entry, index) => (
              <div
                key={entry.user_id}
                className={`px-6 py-4 hover:bg-slate-700 transition-colors ${
                  isCurrentUser(entry.user_id) ? 'bg-slate-700/50 border-l-4 border-white' : ''
                }`}
              >
                <div className="grid grid-cols-12 gap-4 items-center">
                  {/* Rank */}
                  <div className="col-span-1">
                    <div className={`inline-flex items-center justify-center w-8 h-8 rounded-full ${getRankBadge(entry.rank)}`}>
                      {getRankIcon(entry.rank)}
                    </div>
                  </div>

                  {/* User Info */}
                  <div className="col-span-6">
                    <div className="flex items-center space-x-3">
                      <div className="w-10 h-10 bg-slate-600 rounded-full flex items-center justify-center">
                        <span className="text-white font-semibold text-sm">
                          {entry.username.charAt(0).toUpperCase()}
                        </span>
                      </div>
                      <div>
                        <p className={`font-medium ${isCurrentUser(entry.user_id) ? 'text-white' : 'text-slate-200'}`}>
                          {entry.username}
                          {isCurrentUser(entry.user_id) && (
                            <span className="ml-2 text-xs bg-slate-800 text-white px-2 py-1 rounded">
                              You
                            </span>
                          )}
                        </p>
                        <p className="text-slate-400 text-sm">
                          Rank #{entry.rank} of {leaderboard.length}
                        </p>
                      </div>
                    </div>
                  </div>

                  {/* Achievements */}
                  <div className="col-span-2 text-center">
                    <div className="flex items-center justify-center space-x-1">
                      <Trophy className="h-4 w-4 text-slate-400" />
                      <span className="text-white font-semibold">{entry.total_achievements}</span>
                    </div>
                  </div>

                  {/* Points */}
                  <div className="col-span-2 text-center">
                    <div className="flex items-center justify-center space-x-1">
                      <Star className="h-4 w-4 text-slate-400" />
                      <span className="text-white font-semibold">{entry.total_points}</span>
                    </div>
                  </div>

                  {/* Trend */}
                  <div className="col-span-1 text-right">
                    <TrendingUp className="h-4 w-4 text-slate-400" />
                  </div>
                </div>
              </div>
            ))
          )}
        </div>
      </div>

      {/* Stats Summary */}
      {leaderboard.length > 0 && (
        <div className="mt-6 grid grid-cols-1 md:grid-cols-3 gap-4">
          <div className="bg-slate-800 border border-slate-600 rounded-lg p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-slate-400 text-sm">Total Participants</p>
                <p className="text-2xl font-bold text-white">{leaderboard.length}</p>
              </div>
              <Users className="h-8 w-8 text-slate-400" />
            </div>
          </div>

          <div className="bg-slate-800 border border-slate-600 rounded-lg p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-slate-400 text-sm">Top Score</p>
                <p className="text-2xl font-bold text-white">
                  {leaderboard[0]?.total_points || 0}
                </p>
              </div>
              <Crown className="h-8 w-8 text-slate-400" />
            </div>
          </div>

          <div className="bg-slate-800 border border-slate-600 rounded-lg p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-slate-400 text-sm">Average Score</p>
                <p className="text-2xl font-bold text-white">
                  {Math.round(leaderboard.reduce((sum, entry) => sum + entry.total_points, 0) / leaderboard.length)}
                </p>
              </div>
              <TrendingUp className="h-8 w-8 text-slate-400" />
            </div>
          </div>
        </div>
      )}

      {/* Info Section */}
      <div className="mt-6 p-4 bg-slate-700 rounded-lg">
        <h5 className="text-sm font-medium text-white mb-2">About the Leaderboard</h5>
        <ul className="text-xs text-slate-300 space-y-1">
          <li>• Rankings are based on total achievement points</li>
          <li>• Points are earned by unlocking achievements</li>
          <li>• Leaderboard updates in real-time</li>
          <li>• Your position is highlighted with a border</li>
        </ul>
      </div>
    </div>
  );
} 
