// Comprehensive type definitions for the K53 application

export interface K53Question {
  id: string;
  category: "controls" | "signs" | "rules";
  question: string;
  options: string[];
  correct: number;
  explanation: string;
  language: "en" | "af" | "zu";
}

export interface K53Scenario {
  id: string;
  category: string;
  title: string;
  scenario: string;
  question: string;
  options: string[];
  correct: number;
  explanation: string;
  difficulty: "basic" | "intermediate" | "advanced";
  context: string;
  time_of_day?: "day" | "night" | "dawn" | "dusk";
  weather?: "clear" | "rainy" | "foggy" | "snowy";
  language: "en" | "af" | "zu";
  location?: LocationData;
  created_at: string;
  updated_at: string;
}

export interface LocationData {
  id: string;
  name: string;
  province: string;
  coordinates?: {
    latitude: number;
    longitude: number;
  };
  description?: string;
  image_url?: string;
}

export interface UserProgress {
  id: string;
  user_id: string;
  test_type: "questions" | "scenarios";
  category: string;
  score: number;
  total_questions: number;
  correct_answers: number;
  passed: boolean;
  time_taken: number; // in seconds
  completed_at: string;
  questions_attempted: QuestionAttempt[];
}

export interface QuestionAttempt {
  question_id: string;
  selected_answer: number;
  correct: boolean;
  time_spent: number; // in seconds
}

export interface UserAchievement {
  id: string;
  user_id: string;
  achievement_id: string;
  unlocked: boolean;
  unlocked_at?: string;
  progress: number; // 0-100
  achievement: Achievement;
}

export interface Achievement {
  id: string;
  title: string;
  description: string;
  category: "learning" | "performance" | "engagement" | "mastery";
  icon: string;
  criteria: AchievementCriteria;
  points: number;
  rarity: "common" | "rare" | "epic" | "legendary";
}

export interface AchievementCriteria {
  type: "questions_completed" | "scenarios_completed" | "perfect_scores" | "streak" | "time_spent";
  target: number;
  category?: string;
  difficulty?: string;
}

export interface UserProfile {
  id: string;
  user_id: string;
  email: string;
  first_name?: string;
  last_name?: string;
  avatar_url?: string;
  location?: string;
  preferences: UserPreferences;
  created_at: string;
  updated_at: string;
}

export interface UserPreferences {
  language: "en" | "af" | "zu";
  theme: "light" | "dark" | "auto";
  notifications: {
    email: boolean;
    push: boolean;
    achievements: boolean;
    reminders: boolean;
  };
  accessibility: {
    high_contrast: boolean;
    large_text: boolean;
    screen_reader: boolean;
    reduced_motion: boolean;
  };
  study: {
    daily_goal: number;
    preferred_time: string;
    difficulty_preference: "basic" | "intermediate" | "advanced";
  };
}

export interface UserStats {
  total_tests: number;
  questions_tested: number;
  scenarios_tested: number;
  average_score: number;
  best_score: number;
  total_time_spent: number; // in minutes
  current_streak: number;
  longest_streak: number;
  achievements_unlocked: number;
  total_achievements: number;
  recent_progress: UserProgress[];
}

export interface DatabaseScenario {
  id: string;
  category: string;
  title: string;
  scenario: string;
  question: string;
  options: string[];
  correct: number;
  explanation: string;
  difficulty: string;
  context: string;
  time_of_day?: string;
  weather?: string;
  language: string;
  location?: LocationData;
  created_at: string;
  updated_at: string;
}

export interface DatabaseQuestion {
  id: string;
  category: string;
  question: string;
  options: string[];
  correct: number;
  explanation: string;
  language: string;
  created_at: string;
  updated_at: string;
}

export interface Payment {
  id: string;
  user_id: string;
  amount_cents: number;
  currency: string;
  status: "pending" | "completed" | "failed" | "refunded";
  payment_method: "paypal" | "stripe" | "manual";
  transaction_id?: string;
  description: string;
  created_at: string;
  updated_at: string;
}

export interface Subscription {
  id: string;
  user_id: string;
  plan_type: "free" | "basic" | "pro";
  status: "active" | "inactive" | "cancelled" | "expired";
  start_date: string;
  end_date?: string;
  auto_renew: boolean;
  payment_method?: string;
  created_at: string;
  updated_at: string;
}

export interface BlogPost {
  id: string;
  title: string;
  slug: string;
  content: string;
  excerpt: string;
  author: string;
  published_at: string;
  updated_at: string;
  tags: string[];
  featured_image?: string;
  meta_description?: string;
  reading_time?: number;
}

export interface StudyMaterial {
  id: string;
  title: string;
  type: "pdf" | "video" | "interactive" | "quiz";
  category: string;
  difficulty: "basic" | "intermediate" | "advanced";
  content_url: string;
  thumbnail_url?: string;
  description: string;
  duration?: number; // in minutes
  tags: string[];
  created_at: string;
  updated_at: string;
}

export interface PerformanceStats {
  total_attempts: number;
  average_score: number;
  weak_categories: string[];
  strong_categories: string[];
}

export interface PersonalizedRecommendation {
  type: "daily_goal" | "focus_area" | "study_plan" | "difficulty_adjustment" | "time_optimization" | "motivation";
  title: string;
  description: string;
  priority: "high" | "medium" | "low";
  actionable: boolean;
  action_text?: string;
  action_url?: string;
  estimated_time?: number; // in minutes
  confidence: number; // 0-100
}

// API Response Types
export interface ApiResponse<T> {
  data: T;
  success: boolean;
  message?: string;
  error?: string;
}

export interface PaginatedResponse<T> {
  data: T[];
  pagination: {
    page: number;
    limit: number;
    total: number;
    total_pages: number;
  };
}

// Error Types
export interface ApiError {
  code: string;
  message: string;
  details?: Record<string, unknown>;
  timestamp: string;
}

// Form Types
export interface FormField {
  name: string;
  label: string;
  type: "text" | "email" | "password" | "select" | "textarea" | "checkbox" | "radio";
  required: boolean;
  validation?: {
    pattern?: string;
    min_length?: number;
    max_length?: number;
    custom?: (value: string) => string | null;
  };
  options?: Array<{ value: string; label: string }>;
}

// Event Types
export interface UserEvent {
  id: string;
  user_id: string;
  event_type: "login" | "logout" | "test_start" | "test_complete" | "achievement_unlocked" | "payment" | "subscription_change";
  event_data: Record<string, unknown>;
  timestamp: string;
  session_id?: string;
}

// Notification Types
export interface Notification {
  id: string;
  user_id: string;
  type: "achievement" | "reminder" | "system" | "payment";
  title: string;
  message: string;
  read: boolean;
  action_url?: string;
  created_at: string;
}

// Analytics Types
export interface AnalyticsEvent {
  id: string;
  event_type: string;
  user_id?: string;
  session_id?: string;
  properties: Record<string, unknown>;
  timestamp: string;
}

export interface ErrorLog {
  id: string;
  error_type: string;
  message: string;
  stack_trace: string | undefined;
  user_id: string | undefined;
  session_id: string | undefined;
  user_agent: string | undefined;
  url: string | undefined;
  resolved: boolean;
  created_at: string;
  resolved_at: string | undefined;
}

// Component Props Types
export interface BaseComponentProps {
  className?: string;
  children?: React.ReactNode;
}

export interface LoadingProps extends BaseComponentProps {
  size?: "sm" | "md" | "lg";
  text?: string;
}

export interface ModalProps extends BaseComponentProps {
  is_open: boolean;
  on_close: () => void;
  title?: string;
  size?: "sm" | "md" | "lg" | "xl";
}

// Utility Types
export type DeepPartial<T> = {
  [P in keyof T]?: T[P] extends object ? DeepPartial<T[P]> : T[P];
};

export type Optional<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>;

export type RequiredFields<T, K extends keyof T> = T & Required<Pick<T, K>>;

// Runtime Type Validation
export const isK53Question = (obj: unknown): obj is K53Question => {
  return (
    typeof obj === "object" &&
    obj !== null &&
    "id" in obj &&
    "category" in obj &&
    "question" in obj &&
    "options" in obj &&
    "correct" in obj &&
    "explanation" in obj &&
    "language" in obj
  );
};

export const isUserProgress = (obj: unknown): obj is UserProgress => {
  return (
    typeof obj === "object" &&
    obj !== null &&
    "id" in obj &&
    "user_id" in obj &&
    "test_type" in obj &&
    "category" in obj &&
    "score" in obj &&
    "total_questions" in obj &&
    "correct_answers" in obj &&
    "passed" in obj &&
    "time_taken" in obj &&
    "completed_at" in obj
  );
};

export const isAchievement = (obj: unknown): obj is Achievement => {
  return (
    typeof obj === "object" &&
    obj !== null &&
    "id" in obj &&
    "title" in obj &&
    "description" in obj &&
    "category" in obj &&
    "icon" in obj &&
    "criteria" in obj &&
    "points" in obj &&
    "rarity" in obj
  );
};
